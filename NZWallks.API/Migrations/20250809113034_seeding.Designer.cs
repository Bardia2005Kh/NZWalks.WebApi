// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NZWalks.API.Data;

#nullable disable

namespace NZWallks.API.Migrations
{
    [DbContext(typeof(NZWalksDbContext))]
    [Migration("20250809113034_seeding")]
    partial class seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NZWallks.API.Models.Domain.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f660183c-2740-43e7-bc14-d181581a9cc2"),
                            Name = "Easy"
                        },
                        new
                        {
                            Id = new Guid("4ac5cbcb-c5d0-4dd5-b7e5-476cddab9746"),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = new Guid("96c9f1fd-4241-4b67-af7c-890c90795eed"),
                            Name = "Hard"
                        });
                });

            modelBuilder.Entity("NZWallks.API.Models.Domain.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65c77947-4986-416c-8c4d-d77ffac47922"),
                            Code = "TEH",
                            Name = "Tehran",
                            RegionImageUrl = "Some-Images-URL.jpg"
                        },
                        new
                        {
                            Id = new Guid("3b146646-6a25-42de-961c-3095257625f1"),
                            Code = "KRJ",
                            Name = "Karaj",
                            RegionImageUrl = "Some-Images-URL.jpg"
                        },
                        new
                        {
                            Id = new Guid("7a1b2c3d-4e5f-6a7b-8c9d-0e1f2a3b4c5d"),
                            Code = "SHZ",
                            Name = "Shiraz",
                            RegionImageUrl = "some-shiraz-image-url.jpg"
                        },
                        new
                        {
                            Id = new Guid("9b2c3d4e-5f6a-7b8c-9d0e-1f2a3b4c5d6e"),
                            Code = "ISF",
                            Name = "Isfahan",
                            RegionImageUrl = "some-isfahan-image-url.jpg"
                        },
                        new
                        {
                            Id = new Guid("1c3d4e5f-6a7b-8c9d-0e1f-2a3b4c5d6e7f"),
                            Code = "MHD",
                            Name = "Mashhad",
                            RegionImageUrl = "some-mashhad-image-url.jpg"
                        },
                        new
                        {
                            Id = new Guid("2d4e5f6a-7b8c-9d0e-1f2a-3b4c5d6e7f8a"),
                            Code = "TBZ",
                            Name = "Tabriz",
                            RegionImageUrl = "some-tabriz-image-url.jpg"
                        });
                });

            modelBuilder.Entity("NZWallks.API.Models.Domain.Walk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LengthInKm")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalkImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("RegionId");

                    b.ToTable("Walks");
                });

            modelBuilder.Entity("NZWallks.API.Models.Domain.Walk", b =>
                {
                    b.HasOne("NZWallks.API.Models.Domain.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NZWallks.API.Models.Domain.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
